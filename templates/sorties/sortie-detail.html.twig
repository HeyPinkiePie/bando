{% extends 'base.html.twig' %}

{% block title %}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==" crossorigin="" />
    <style type="text/css">
        #map{ /* la carte DOIT avoir une hauteur sinon elle n'apparaît pas */
            height:400px;
        }
    </style>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==" crossorigin=""></script>
    <script type="text/javascript">
        // On initialise la latitude et la longitude de Paris (centre de la carte)
        var lat = {{ sortie.lieu.latitude }};
        var lon = {{ sortie.lieu.longitude }};
        var macarte = null;
        // Fonction d'initialisation de la carte
        function initMap() {
            // Créer l'objet "macarte" et l'insèrer dans l'élément HTML qui a l'ID "map"
            macarte = L.map('map').setView([lat, lon], 11);
            // Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr
            L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
                // Il est toujours bien de laisser le lien vers la source des données
                attribution: 'données © <a href="//osm.org/copyright">OpenStreetMap</a>/ODbL - rendu <a href="//openstreetmap.fr">OSM France</a>',
                minZoom: 1,
                maxZoom: 20
            }).addTo(macarte);
            var marker = L.marker([lat, lon]).addTo(macarte);
        }

        window.onload = function(){
            // Fonction d'initialisation qui s'exécute lorsque le DOM est chargé
            initMap();
        };
    </script>
{% endblock %}
{% block body %}

    <h3>Afficher une sortie</h3>
    <div id="map">
    </div>
    <section>
        <h6>Nom de la sortie:</h6><p>{{ sortie.nom }}</p>
        <h6>Date limite d'inscription:</h6><p>{{ sortie.dateLimiteInscription|date('d/m/Y H:i') }}</p>
        <h6>Date début sortie:</h6><p>{{ sortie.debutSortie|date('d/m/Y H:i') }}</p>
        <h6>Nombre d'inscription maximum:</h6><p>{{ sortie.nombreInscriptionsMax }}</p>
        <h6>Information sur la sortie:</h6><p>{{ sortie.infosSortie }}</p>
        <h6>Lieu de la sortie</h6>
        <p>{{ sortie.lieu.nom }}</p>
        <p>{{ sortie.lieu.rue }}</p>
        <p>{{ sortie.lieu.ville.codePostal }} {{ sortie.lieu.ville }}</p
    </section>
    <section>
        <table class="table table-striped">
            <thead>
            <tr>
                <th id="titre_participants">Participants</th>
            </tr>
            </thead>
            <tbody>
            {% for participant in sortie.participants %}
                <tr>
                    <td id="nom_participants"><a href="{{ path('profil_affich', {'id': participant.id}) }}">{{ participant.prenom }} {{ participant.nom }}</a></td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </section>

    <p id="demo"></p>

    <script>
        // Set the date we're counting down to
        var countDownDate = new Date("Jan 5, 2024 15:37:25").getTime();;

        // Update the count down every 1 second
        var x = setInterval(function() {

            // Get today's date and time
            var now = new Date().getTime();

            // Find the distance between now and the count down date
            var distance = countDownDate - now;

            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Output the result in an element with id="demo"
            document.getElementById("demo").innerHTML = days + "d " + hours + "h "
                + minutes + "m " + seconds + "s ";

            // If the count down is over, write some text
            if (distance < 0) {
                clearInterval(x);
                document.getElementById("demo").innerHTML = "EXPIRED";
            }
        }, 1000);
    </script>

{% endblock %}

